render_template("название файла для вывода.html") чтобы выводить полноценные html страницы
Все html должны храниться в папке templates(Иначе фласк их не увидит)
чтобы не плодить html код(ПРАВИЛО не повторять самого себя) Для этого создаем шаблон HTML

ДАлее подключаем бутстрап с сайте https://www.bootstrapcdn.com/ сss копируя html ссылку
Прописываем в нашем base.html link и вставляем туда ссылку
заходим на страницу шаблона, правой кнопкой показать код, (затем копировать все body) вставить к себе куда надо


SQLAlchemy — это Python-библиотека, которая позволяет работать с реляционными базами данных с помощью ORM.
Реляционные базы данных хранят информацию в виде связанных между собой таблиц. К таким базам относят Oracle, Microsoft SQL Server, PostgreSQL и другие.
Реляционные базы данных работают по принципам реляционной алгебры, но это тема для отдельной статьи.
Сила SQLAlchemy — в её ORM. Расшифровывается как object relational mapper, или «объектно-реляционное отображение».
ORM позволяет управлять базами данных с помощью методов объектов в коде и при этом не использовать SQL-запросы.
На самом деле это очень удобно, так как позволяет писать привычный код, не переключаясь на SQL.

Мы будем использовать SQLite, так как для неё не нужно поднимать сервер и она уже установлена вместе с Python.
При этом дополнительно импортировать ничего не придётся — SQLAlchemy всё сделает за нас.


чтобы оказаться в среде выполнения прописываем в терминале - python
затем                                                      - from main import db
потом                                                      - db.create_all()

app.app_context().push()
"""Чтобы заработала команда db.create_all(), надо добавить строку
app.app_context().push()
после строчки, где вы объявляете переменную db.
После выйти из консоли python, зайти в неё снова и опять прописать те команды""


Создаем метод POST в create.html заполняем все наши \чейки таблицы кроме id оно заполняется само
В main делаем декоратор с отслеживание методов гет и пост, потому что мы получаем и принимаем значения
метод request позволяет нам считывать данные что отправляет метод POST
и то что мы получаем из POST ответа пользователя записываем в свои переменные, для последующего дабавления в нашу базу


Создаем вывод наших элементов на главную страницу
<main>
  {% for el in data %}
  {% endfor %} прописываем в index.html и в main в index делаем вывод элемента
  В классе Item создаем функцию Repr чтобы было видно название товара


Подкручиваем платежную систему



UserMixin для модели класса Client
Flask-Login обеспечивает управление сеансами пользователей для Flask.
Он выполняет общие задачи входа в систему, выхода из системы и запоминания сеансов ваших пользователей в течение длительных периодов времени.